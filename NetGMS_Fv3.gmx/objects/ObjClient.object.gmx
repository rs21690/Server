<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>   //Setup the network's global variables for both TCP and UDP support;
   Net_Setup( true , true );
   
   //Get the IP of the client;
   var ip = get_string( "UDP Server IP Address?" , "127.0.0.1" );
   
   //Initiate the UDP server;
   Udp_Result = Net_UdpServer( 64198 , 32 , ip , 2048 );
   
   //Set these variables for future use;
   Tcp_Result = -1;
   Socket = -1;
   ServerID = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>   //If the TCP socket has not been created or has an error, search for a new server and recreate the TCP socket;
   if ( Net_TcpAssets( tcp_asset_sck ) &lt;= network_error ) {
      //Get the ds_map containing the server names/ips and get the first server in the ds_map;
      var server_map = Net_UdpAssets( udp_asset_map );
      var server = ds_map_find_first( server_map );
      var position = 0;
      
      //Loop through the ds_map searching for server entires;
      repeat( Net_UdpAssets( udp_asset_msz ) ) {
         //Select this server entery if we click on it;
         if ( mouse_x &gt;= 0 &amp;&amp; mouse_x &lt;= view_wview &amp;&amp; mouse_y &gt;= position * 15 &amp;&amp; mouse_y &lt;= ( position * 15 ) + 13 ) {
            if ( mouse_check_button_pressed( mb_left ) ) {
               //Connect the TCP client to the server found;
               Tcp_Result = Net_TcpClient( Net_UdpAssets( udp_asset_prt ) , ds_map_find_value( server_map , server ) , 4096 );
               ServerID = server;
            }
         }
         
         server = ds_map_find_next( server_map , position );
         position += 1;
      }
   }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>   //Check for incoming networking messages;
   Net_Handle( Client_Messages );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>   //Destroy the TCP client and UDP server when the game is over;
   Net_TcpDestroy();
   Net_UdpDestroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>   //Draw the client properties to the screen;
   draw_set_color( c_white );
   
   if ( Net_TcpAssets( tcp_asset_sck ) &gt;= network_noerror ) {
      draw_text( 5 , 5 , "Server Name: " + string( ServerID ) );
      draw_text( 5 , 20 , "Tcp Status: " + string( Net_TcpAssets( tcp_asset_sck ) ) );
      draw_text( 5 , 35 , "Udp Status: " + string( Net_UdpAssets( udp_asset_sck ) ) );
   } else {
      var server_map = Net_UdpAssets( udp_asset_map );
      var server = ds_map_find_first( server_map );
      var position = 0;
      
      repeat( Net_UdpAssets( udp_asset_msz ) ) {
         draw_text( 5 , 5 + ( 15 * position ) , string( server ) + " : " + string( ds_map_find_value( server_map , server ) ) );
         server = ds_map_find_next( server_map , position );
         position += 1;
      }
   }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
